#! /usr/bin/python3

import os
import logging
import logging.config
import sys
from weakref import proxy

from format import Addr, Uri, Nameaddr, Hop, Status
from party import PlannedRouting, Routing
from registrar import LocalRecord, UriHop
from log import setup_logging, log_exception, Oid
from mgw import MediaGateway
from switch import Switch
from zap import Plug, loop
from test import CallerEndpoint, CalleeEndpoint, UnreachableEndpoint, RingingEndpoint, BlindTransferringEndpoint, TestSubscriptionManager, TestPublicationManager, TestLineManager, TestController
from util import EventKey


TEST_DIALIN = 1
TEST_DIALOUT = 2
TEST_PICKUPIN = 3
TEST_PICKUPOUT = 4
TEST = TEST_DIALIN

NUMBER_A_PREFIX = "2"
NUMBER_A_SNOM_1 = "201"
NUMBER_A_SNOM_2 = "202"
NUMBER_A_CISCO_1 = "211"
NUMBER_A_REMOTE_CALLEE = "240"
NUMBER_A_LOCAL_CALLEE = "250"
NUMBER_A_LOCAL_UNREACHABLE = "251"
NUMBER_A_LOCAL_REJECTING = "252"
NUMBER_A_LOCAL_RINGING = "253"
NUMBER_A_LOCAL_BLIND_TRANSFERRING = "254"
NUMBER_A_SERVICE_VOICEMAIL = "260"
NUMBER_A_LOCAL_RINGING_LINE = "261"  # will be pickup
NUMBER_A_LOCAL_CALLEE_LINE = "262"  # will be orbit

NUMBER_B_PREFIX = "3"
NUMBER_B_LOCAL_CALLEE = "350"
NUMBER_B_LOCAL_RECORD = "360"
NUMBER_B_LOCAL_FORK = "361"

NUMBER_DDI_CALLER = "400"

HOST = "otthon"
MEDIA_HOST = "otthon"
MGW_HOST = "localhost"
MGW_ADDR = Addr(MGW_HOST, 20000)

A_ADDR = Addr(HOST, 5060)
A_URI = Uri(A_ADDR)
A_DOMAIN = "a.switch"
A_REALM = A_DOMAIN
A_AUTHNAME = "A_AUTHNAME"
A_HA1 = "A_HA1"

B_ADDR = Addr(HOST, 5062)
B_URI = Uri(B_ADDR)
B_DOMAIN = "b.switch"
B_REALM = B_DOMAIN
B_AUTHNAME = "B_AUTHNAME"
B_HA1 = "B_HA1"

C_DOMAIN = "192.168.1.2"  # for the stupid Cisco that resolves everything

DDI_DOMAIN = "d.switch"

SNOM_AUTHNAME = "phone"
SNOM_HA1 = "38450ead4036feb352c45462d8008511"  # md5(phone:a.switch:secret)
SNOM_WEB = Addr("192.168.1.7", 80)

CISCO_AUTHNAME = "mycisco"
CISCO_HA1 = "2891f2e30de2dbc69d14127226a096a6"  # md5(mycisco:a.switch:mypassword)
MAC_CISCO_1 = "1ce6c798d483"  # TODO

CALLER_NAMEADDR = Nameaddr(Uri(Addr(B_DOMAIN, None), "caller"), "Caller")
CALLEE_NAMEADDR = Nameaddr(Uri(Addr(B_DOMAIN, None), "callee"), "Callee")

        
class TestSwitch(Switch):
    def __init__(self):
        subman = TestSubscriptionManager(proxy(self), NUMBER_A_SERVICE_VOICEMAIL)  # FIXME
        pubman = TestPublicationManager(proxy(self))
        mgc = TestController()

        Switch.__init__(
            self,
            subscription_manager=subman,
            publication_manager=pubman,
            mgc=mgc
        )
        
        self.line_manager = TestLineManager()
        self.default_domain = None
        self.unsolicited_ids_by_urihop = {}
        self.states_by_key = {}


    def set_oid(self, oid):
        Switch.set_oid(self, oid)
        
        self.line_manager.set_oid(oid.add("lineman"))
        

    def start(self, realm, default_domain, local_addr, mgw_addr, media_addrs):
        self.account_manager.set_local_realm(realm)
        self.default_domain = default_domain
        
        local_addr.assert_resolved()
        mgw_addr.assert_resolved()

        self.mgc.start(media_addrs)
        self.mgc.add_mgw_addr(mgw_addr)
        
        hop = Hop("UDP", "eth0", local_addr, None)
        self.transport_manager.add_hop(hop)
        
        hop = Hop("TCP", "eth0", local_addr, None)
        self.transport_manager.add_hop(hop)


    def fix(self, na):
        return na._replace(uri=na.uri._replace(addr=na.uri.addr._replace(host=self.default_domain)))


    def process(self, msg):
        if "Cisco" in msg.get("user_agent", "") and self.default_domain:
            msg["from"] = self.fix(msg["from"])
            msg["to"] = self.fix(msg["to"])
    
        return Switch.process(self, msg)


    def make_party(self, type):
        if type == "caller":
            return CallerEndpoint()
        elif type == "callee":
            return CalleeEndpoint()
        elif type == "unreachable":
            return UnreachableEndpoint()
        elif type == "ringing":
            return RingingEndpoint()
        elif type == "blind_transferring":
            return BlindTransferringEndpoint()
        elif type == "line":
            return self.line_manager.make_line()
        else:
            return Switch.make_party(self, type)


    def record_changed(self, aor, urihop, info):
        if info and info.user_agent and "Cisco" in info.user_agent:
            self.logger.info("A Cisco device registered, initiating unsolicited MWI.")
            key = EventKey("voicemail", aor.username)
            format = "msgsum"
            local_uri = aor._replace(scheme="sip")
            remote_uri = urihop.uri
            hop = urihop.hop
            
            id = self.subscription_manager.unsolicited_subscribe(key, format, local_uri, remote_uri, hop)
            self.unsolicited_ids_by_urihop[urihop] = id
        elif not info and urihop in self.unsolicited_ids_by_urihop:
            self.logger.info("A Cisco device unregistered, stopping unsolicited MWI.")
            key = EventKey("voicemail", aor.username)
            id = self.unsolicited_ids_by_urihop.pop(urihop)
            
            self.subscription_manager.unsolicited_unsubscribe(key, id)
            
            
    def state_changed(self, key, etag, state):
        self.logger.info("State changed for %s=%s/%s: %s" % (*key, etag, state))
        
        s = self.states_by_key.setdefault(key, ({}, {}))
        partial, total = s
        
        if state is None:
            partial.pop(etag, None)
        else:
            partial[etag] = state
            
        t = {}
        for p in partial.values():
            t.update(p)

        if t != total:
            self.logger.info("Total state changed.")
            total.clear()
            total.update(t)

            if key.type == "phone":
                self.logger.info("Triggering busylamp for phone state change.")
                es = self.subscription_manager.get_event_source(EventKey("busylamp", key.id))
                es.set_state(total)


    def reregister_snom(self, addr, line):
        post_data = "REREGISTER%3A1=Re-Register"
        url = "http://%s/line_login.htm?l=%d" % (addr, line)
        os.system("wget -q --output-document=/dev/null --post-data='%s' '%s'" % (post_data, url))


    def add_record_account(self, uri, authname, ha1, policy, hops=[]):
        if not self.account_manager.get_local_account(authname):
            self.account_manager.add_local_account(authname, ha1)
            
        record = self.registrar.add_local_record(uri, authname, policy)
        
        for hop in hops:
            record.add_static_contact(UriHop(uri, hop))  # assume same contact uri as the aor


def mkctx(src):
    if src["type"] == "sip":
        return dict(
            src_addr=src["from"].uri.addr,
            src_username=src["from"].uri.username,
            src_name=src["from"].name,
            
            dst_addr=src["to"].uri.addr,
            dst_username=src["to"].uri.username,
            dst_name=src["to"].name,
            
            alert_info=src.get("alert_info")
        )
    else:
        raise Exception("Unknown src type: %s!" % src["type"])
    

class SwitchA(TestSwitch):
    class ARouting(Routing):
        def process_dial(self, action):
            ctx = action["ctx"]
            
            if not ctx:
                ctx.update(mkctx(action["src"]))
                src_addr = ctx["src_addr"]
                src_username = ctx["src_username"]
                dst_username = ctx["dst_username"]
                self.logger.info("Prerouting from %s." % (src_username,))
                
                if dst_username.startswith("*"):
                    # Call pickup testing
                    target_number = dst_username[1:]
                elif dst_username.startswith("x-cisco-serviceuri-blfpickup-"):
                    target_number = dst_username[29:]
                else:
                    target_number = None
                    
                if target_number:
                    dst_uri = Uri(Addr(A_DOMAIN), src_username)
                    self.logger.info("Okay, pickup from %s to %s." % (target_number, dst_uri))

                    self.reject_incoming_leg(Status.DECLINED)
                    self.ground.switch.line_manager.call_pickup(target_number, dst_uri)
                    return
                
                self.dial(action, "line", is_outgoing=True, addr=src_addr, username=src_username)
                return

            src_addr = ctx["src_addr"]
            src_username = ctx["src_username"]
            src_name = ctx["src_name"]
            
            dst_username = ctx["dst_username"]
            dst_addr = ctx["dst_addr"]
            self.logger.info("Routing to %s." % (dst_username,))
            
            if dst_username >= "200" and dst_username < "250":
                # Numbers for registering clients
                self.dial(action, "line", addr=dst_addr, username=dst_username)
                return
            elif dst_username >= "250" and dst_username < "300":
                # Numbers for local clients
                if dst_username == NUMBER_A_LOCAL_CALLEE:
                    self.dial(action, "callee")
                    return
                elif dst_username == NUMBER_A_LOCAL_UNREACHABLE:
                    self.dial(action, "unreachable")
                    return
                elif dst_username == NUMBER_A_LOCAL_REJECTING:
                    self.dial(action, "rejecting")
                    return
                elif dst_username == NUMBER_A_LOCAL_RINGING:
                    self.dial(action, "ringing")
                    return
                elif dst_username == NUMBER_A_LOCAL_BLIND_TRANSFERRING:
                    x = Nameaddr(Uri(Addr(A_DOMAIN), NUMBER_A_LOCAL_BLIND_TRANSFERRING), "BT")
                    y = Nameaddr(Uri(Addr(A_DOMAIN), NUMBER_A_LOCAL_CALLEE))
                    self.dial(action, "blind_transferring", referred_by=x, refer_to=y)
                    return
                elif dst_username == NUMBER_A_LOCAL_RINGING_LINE:
                    dial = dict(action, ctx=dict(ctx, dst_username=NUMBER_A_LOCAL_RINGING))
                    self.dial(dial, "line", addr=dst_addr, username=dst_username)
                    return
                elif dst_username == NUMBER_A_LOCAL_CALLEE_LINE:
                    dial = dict(action, ctx=dict(ctx, dst_username=NUMBER_A_LOCAL_CALLEE))
                    self.dial(dial, "line", addr=dst_addr, username=dst_username)
                    return
                    
            elif dst_username >= "300" and dst_username < "400":
                # Numbers for switch B
                dst = {
                    'type': "sip",
                    'uri': B_URI,  # B_DOMAIN is not resolvable
                    #'hop': contact.hop,
                    'from': Nameaddr(Uri(Addr(A_DOMAIN), src_username), src_name),
                    'to': Nameaddr(Uri(Addr(B_DOMAIN), dst_username))  # divert to B
                    #'route': []
                }
                
                self.dial(action, **dst)
                return
                
            self.logger.error("Not found: %s" % dst_username)
            

    def start(self, realm, default_domain, local_addr, mgw_addr, media_addrs):
        TestSwitch.start(self, realm, default_domain, local_addr, mgw_addr, media_addrs)
        
        # CALLEE lives on switch-b, but registers here to take calls from here
        remote_callee_aor = Uri(Addr(A_DOMAIN), NUMBER_A_REMOTE_CALLEE)
        self.add_record_account(remote_callee_aor, B_AUTHNAME, B_HA1, LocalRecord.AUTH_IF_UNREGISTERED)
        
        # SNOM lives on its own device, but also registers here
        snom_aor = Uri(Addr(A_DOMAIN), NUMBER_A_SNOM_1)
        self.add_record_account(snom_aor, SNOM_AUTHNAME, SNOM_HA1, LocalRecord.AUTH_IF_UNREGISTERED)

        # Cisco lives on its own device, but also registers here
        cisco_aor = Uri(Addr(A_DOMAIN), NUMBER_A_CISCO_1)
        self.add_record_account(cisco_aor, CISCO_AUTHNAME, CISCO_HA1, LocalRecord.AUTH_IF_UNREGISTERED)
        cisco_hack = Uri(Addr(A_DOMAIN), MAC_CISCO_1)
        self.add_record_account(cisco_hack, CISCO_AUTHNAME, None, LocalRecord.AUTH_ALWAYS_PRESENCE)
        self.publication_manager.add_mac_alias(MAC_CISCO_1, NUMBER_A_CISCO_1)
        
        # Allow calls from anyone on switch B as long as they use this hop
        b_aor = Uri(Addr(B_DOMAIN), None)
        hop1 = Hop('UDP', 'eth0', A_ADDR.resolved(), B_ADDR.resolved())
        hop2 = Hop('TCP', 'eth0', A_ADDR.resolved(), B_ADDR._replace(port=None).resolved())
        self.add_record_account(b_aor, B_AUTHNAME, B_HA1, LocalRecord.AUTH_BY_HOP, [ hop1, hop2 ])
        
        # Allow us to authenticate requests sent to B
        self.account_manager.add_remote_account(B_REALM, A_AUTHNAME, A_HA1)

        # Add a voicemail box to monitor
        self.subscription_manager.add_event_source("voicemail", dict(mailbox="201"))
        self.subscription_manager.add_event_source("voicemail", dict(mailbox="211"))
        
        # Add line states
        self.subscription_manager.add_event_source("busylamp", dict(entity=NUMBER_A_SNOM_1))
        self.subscription_manager.add_event_source("busylamp", dict(entity=NUMBER_A_CISCO_1))
        self.subscription_manager.add_event_source("busylamp", dict(entity=NUMBER_A_LOCAL_RINGING_LINE))
        self.subscription_manager.add_event_source("busylamp", dict(entity=NUMBER_A_LOCAL_CALLEE_LINE))

        # Add local states
        self.publication_manager.add_local_state("phone", dict(entity=NUMBER_A_SNOM_1))
        self.publication_manager.add_local_state("phone", dict(entity=NUMBER_A_CISCO_1))
        
        if TEST == TEST_PICKUPIN:
            Plug(self.test_caller,
                dst_username=NUMBER_A_LOCAL_RINGING_LINE, src_username=NUMBER_DDI_CALLER, src_name="Caller"
            ).attach_time(3)
        
        if TEST == TEST_PICKUPOUT:
            Plug(self.test_caller,
                dst_username=NUMBER_A_SNOM_1, src_username=NUMBER_DDI_CALLER, src_name="Caller"
            ).attach_time(3)
            Plug(self.test_caller,
                dst_username="*" + NUMBER_A_SNOM_1, src_username=NUMBER_DDI_CALLER, src_name="Pickuper"
            ).attach_time(6)
        

    def make_party(self, type):
        if type == "routing":
            return self.ARouting()
        else:
            return TestSwitch.make_party(self, type)


    def test_caller(self, dst_username, src_username, src_name):
        self.logger.info("Calling %s from %s as %s." % (dst_username, src_username, src_name))

        dst = {
            'from': Nameaddr(Uri(Addr(A_DOMAIN), src_username), src_name),
            'to': Nameaddr(Uri(Addr(A_DOMAIN), dst_username))
        }
        
        self.start_call("caller", dst)


class SwitchB(TestSwitch):
    class BRouting(PlannedRouting):
        def plan(self):
            self.logger.debug("Routing plan started.")
            li, action = yield from self.wait_leg_action()
            ctx = action["ctx"]
            
            if not ctx:
                ctx.update(mkctx(action["src"]))
                src_username = ctx["src_username"]
                src_addr = ctx["src_addr"]

                self.dial(action, "line", is_outgoing=True, addr=src_addr, username=src_username)
                return

            src_username = ctx["src_username"]
            src_addr = ctx["src_addr"]
            src_name = ctx["src_name"]
        
            dst_username = ctx["dst_username"]
            dst_addr = ctx["dst_addr"]
            
            if dst_addr == Addr(A_DOMAIN):
                if dst_username == NUMBER_A_REMOTE_CALLEE:
                    # This was forwarded here from A because we registered there,
                    # so the domain remained A_DOMAIN.
                    self.dial(action, "callee")
                    return
            elif dst_addr == Addr(B_DOMAIN):
                if dst_username == NUMBER_B_LOCAL_CALLEE:
                    self.dial(action, "callee")
                    return
                elif dst_username == NUMBER_B_LOCAL_RECORD:
                    ctx["dst_username"] = NUMBER_B_LOCAL_FORK
                    self.dial(action, "record", id="rekord")
                    return
                elif dst_username == NUMBER_B_LOCAL_FORK:
                    self.dial(action, "unreachable")
                    self.dial(action, "ringing")
                    self.dial(action, "callee")
                    return
                elif dst_username >= "200" and dst_username < "300":
                    dst = {
                        'type': "sip",
                        'uri': A_URI,  # A_DOMAIN is not resolvable
                        #'hop': contact.hop,
                        'from': Nameaddr(Uri(src_addr, src_username), src_name),
                        'to': Nameaddr(Uri(Addr(A_DOMAIN), dst_username)),  # divert to A
                        #'route': []
                    }
                
                    self.dial(action, **dst)
                    return
            
            self.logger.error("Not found: %s" % dst_username)
            
            
    def start(self, realm, default_domain, local_addr, mgw_addr, media_addrs):
        TestSwitch.start(self, realm, default_domain, local_addr, mgw_addr, media_addrs)
        
        #phone_uri = Uri(Addr(A_DOMAIN, None), SNOM_NUMBER)
        #self.add_record_account(phone_uri, A_AUTHNAME, A_HA1, LocalRecord.AUTH_IF_UNREGISTERED)
        
        #self.account_manager.add_account(phone_uri, "Phone", Account.AUTH_IF_UNREGISTERED, A_CRED[0], A_CRED[1])

        # Allow calls from anyone on switch A as long as they authenticate themselves as A
        a_aor = Uri(Addr(A_DOMAIN), None)
        self.add_record_account(a_aor, A_AUTHNAME, A_HA1, LocalRecord.AUTH_ALWAYS)
        
        # Allow us to authenticate ourselves at A
        self.account_manager.add_remote_account(A_REALM, B_AUTHNAME, B_HA1)

        Plug(self.reregister_snom, addr=SNOM_WEB, line=1).attach_time(1)

        if TEST == TEST_DIALOUT:
            Plug(self.test_dialing).attach_time(3)
            
        if TEST == TEST_DIALIN:
            Plug(self.test_registering).attach_time(3)


    def make_party(self, type):
        if type == "routing":
            return self.BRouting()
        else:
            return TestSwitch.make_party(self, type)


    def test_registering(self):
        self.logger.info("Registering to Switch A.")

        self.registrar.add_remote_record(
            Uri(Addr(A_DOMAIN), NUMBER_A_REMOTE_CALLEE),
            registrar_uri=A_URI#.resolved()
        )
        
        
    def test_dialing(self):
        self.logger.info("Dialing begins.")

        dst = {
            'from': Nameaddr(Uri(Addr(B_DOMAIN), NUMBER_DDI_CALLER), "Caller"),
            'to': Nameaddr(Uri(Addr(B_DOMAIN), NUMBER_A_SNOM_1))
        }
        
        self.start_call("caller", dst)


def main():
    # By using only local variables, they'll be released when exiting this function,
    # so various __del__ methods will run before interpreter shutdown, when even
    # logging is disfunctional.
    
    setup_logging()
    logging.debug("Hello!")

    mgw = MediaGateway(MGW_ADDR.resolved())
    mgw.set_oid(Oid("mgw"))
    mgw.set_name(Oid("the-mgw"))

    switch_a = SwitchA()
    switch_a.set_oid(Oid().add("switch", "a"))
    switch_a.set_name("switch-a")
    media_addrs = { Addr(MEDIA_HOST, port).resolved() for port in range(30000, 30020, 2) }
    switch_a.start(A_REALM, A_DOMAIN, A_ADDR.resolved(), MGW_ADDR.resolved(), media_addrs)
    
    switch_b = SwitchB()
    switch_b.set_oid(Oid().add("switch", "b"))
    switch_b.set_name("switch-b")
    media_addrs = { Addr(MEDIA_HOST, port).resolved() for port in range(40000, 40020, 2) }
    switch_b.start(B_REALM, B_DOMAIN, B_ADDR.resolved(), MGW_ADDR.resolved(), media_addrs)

    try:
        loop()
    except Exception:
        logging.critical("Crashed!")
        log_exception(*sys.exc_info())
    else:
        logging.critical("Shutting down.")
    finally:
        # The exception object is already gone here
        
        del switch_b
        del switch_a
        del mgw
    
        logging.debug("Bye!")
        logging.shutdown()


main()
