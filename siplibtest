#! /usr/bin/python

from __future__ import print_function, unicode_literals
from pprint import pprint
from weakref import proxy as Weak
from datetime import timedelta, datetime
import logging

from async import Metapoll, WeakMethod

from format import Addr, Uri, Nameaddr, Status, Via, Hop, print_structured_message, parse_structured_message
from transactions import TransactionManager, make_virtual_response, make_simple_response
from dialog import Dialog, DialogManager
from leg import Leg, SipLeg, create_uninvited_leg
from call import Call
from sdp import Sdp
from authority import Credentials, Authority

local_addr = Addr("localhost", 5060)

caller_uri = Uri(local_addr, "caller")
caller_name = "Caller"
caller_nameaddr = Nameaddr(caller_uri, caller_name)

callee_uri = Uri(local_addr, "callee")
callee_name = "Callee"
callee_nameaddr = Nameaddr(callee_uri, callee_name)

wrong_uri = Uri(local_addr, "wrong")

caller_audio_addr = ("localhost", 10000)
caller_video_addr = ("localhost", 10001)

caller_sdp = Sdp.parse("""
v=0
o=jdoe 2890844526 2890842807 IN IP4 10.47.16.5
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.example.com/seminars/sdp.pdf
e=j.doe@example.com (Jane Doe)
c=IN IP4 224.2.17.12
t=2873397496 2873404696
a=recvonly
m=audio 49170 RTP/AVP 0
m=video 51372 RTP/AVP 99
a=rtpmap:99 h263-1998/90000
""")

credentials = Credentials("REALM", "USERNAME", "HA1", None)


class CalleeLeg(Leg):
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def do(self, action):
        if action["type"] == "dial":
            self.offer = action.get("sdp")
            print("Got offer:\n%s" % repr(self.offer))
            self.sleep(1, self.ringing)
        elif action["type"] == "hangup":
            print("The caller hung up.")

        
    def ringing(self):
        self.report(dict(type="ring"))
        self.sleep(1, self.answering)


    def answering(self):
        answer = self.make_answer(self.offer)
        self.report(dict(type="answer", sdp=answer))  # TODO: rename to accept?
        self.sleep(1, self.hanging)
        
        
    def hanging(self):
        self.report(dict(type="hangup"))


    def make_answer(self, offer):
        return offer


class CallerLeg(Leg):
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def dial(self):
        self.ctx["src_proto"] = "TEST"
        self.ctx["from"] = Nameaddr(caller_uri, caller_name)
        self.ctx["to"] = Nameaddr(callee_uri)
        self.report(dict(type="dial", ctx=self.ctx, sdp=caller_sdp))
        #self.sleep(3, self.hanging)


    def do(self, action):
        if action["type"] == "answer":
            print("Answered with SDP:\n%s" % repr(action.get("sdp")))
            #self.sleep(1, self.hanging)

            
    def hanging(self):
        self.leg.do(dict(type="hangup"))


class Transport(object):
    def __init__(self, reception):
        self.reception = reception
        
    def get_hop(self, uri):
        # FIXME: cheating!
        return Hop(local_addr=("a", 10000), remote_addr=("b", 20000), iface="eth0")
        
        
    def send(self, msg):
        hop = msg["hop"]
        sip = print_structured_message(msg)
        print("Transport sending by %s:" % (hop,))
        print("\n" + "\n".join("  %s" % line for line in sip.split("\n")))
        
        poh = Hop(local_addr=hop.remote_addr, remote_addr=hop.local_addr, iface=hop.iface)
        metapoll.register_timeout(timedelta(), WeakMethod(self.process, sip, poh))
        #self.process(sip)


    def process(self, sip, hop):
        #print("Transport receiving:")
        #print(s)
        msg = parse_structured_message(sip)
        msg["hop"] = hop  # TODO: 2 transports!
        self.reception(msg)


class Switch(object):
    def __init__(self, local_addr):
        self.authority = Authority()
        self.transport = Transport(WeakMethod(self.reception))
        self.transaction_manager = TransactionManager(local_addr, WeakMethod(self.transport.send))
        self.dialog_manager = DialogManager(
            local_addr,
            WeakMethod(self.transaction_manager.send_message),
            WeakMethod(self.transport.get_hop),
            WeakMethod(self.authority.provide_auth)
        )

    
    def reject_request(self, msg):
        if msg:
            response = make_simple_response(msg, Status(400, "WTF"))
            self.transaction_manager.send_message(response, msg)


    def challenge_request(self, msg, challenge):
        if msg:
            response = make_simple_response(msg, Status(401, "Hey"), challenge)
            self.transaction_manager.send_message(response, msg)


    def route(self, ctx):
        print("Routing: %s" % ctx)

        if ctx["to"].uri.user == "callee":
            if ctx.get("src_proto") == "TEST":
                outgoing_dialog = Dialog(Weak(self.dialog_manager))
                outgoing_dialog.set_local_credentials(credentials)  # FIXME
                outgoing_leg = SipLeg(outgoing_dialog)
                return outgoing_leg
            else:
                return CalleeLeg()  # Callee display name going back?
                
        return None
        

    def accept_invite(self, params):
        global call2
        incoming_dialog = Dialog(Weak(self.dialog_manager))
        incoming_dialog.set_local_credentials(credentials)  # FIXME
        incoming_leg = SipLeg(incoming_dialog)
        call2 = Call(WeakMethod(self.route))
        call2.add_leg(0, incoming_leg)
        return WeakMethod(incoming_dialog.recv_request)


    def reception(self, params):
        #print("Got message from transport.")
        #print("Req params: %s" % req_params)
        uninvite_params = self.transaction_manager.match_uninvited_response(params)
        if uninvite_params:
            create_uninvited_leg(uninvite_params)
    
        processed = self.transaction_manager.match_incoming_message(params)
        if processed:
            return

        report = None
        
        challenge = self.authority.need_auth(credentials, params)  # FIXME
        if challenge:
            report = WeakMethod(self.challenge_request, challenge)

        if not report:
            report = self.dialog_manager.match_incoming_request(params)
    
        if not report:
            if params["method"] == "INVITE" and "tag" not in params["to"].params:
                report = self.accept_invite(params)
    
        if not report:
            report = WeakMethod(self.reject_request)
        
        self.transaction_manager.create_incoming_request(params, report)


    def testing(self):
        global call1
        print("Testing begins.")

        incoming_leg = CallerLeg()
        call1 = Call(WeakMethod(self.route))
        call1.add_leg(0, incoming_leg)
        incoming_leg.dial()


switch = Switch(local_addr)

logging.basicConfig(level=logging.DEBUG)
metapoll = Metapoll()
metapoll.register_timeout(timedelta(seconds=0.2), WeakMethod(switch.transaction_manager.maintenance), repeat=True)
metapoll.register_timeout(timedelta(seconds=1), WeakMethod(switch.testing))

while True:
    try:
        metapoll.do_poll()
    except KeyboardInterrupt:
        break
