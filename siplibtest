#! /usr/bin/python

from __future__ import print_function, unicode_literals
from pprint import pprint
import weakref
from datetime import timedelta
import logging

from async import Metapoll, WeakMethod

from format import Addr, Uri, Nameaddr, Status, Via, print_structured_message, parse_structured_message
from transactions import TransactionManager
from dialog import Dialog, DialogManager

local_addr = Addr("localhost", 5060)

#caller_addr = Addr("CALLER", 5060)
caller_uri = Uri(local_addr, "caller")
caller_nameaddr = Nameaddr(caller_uri, "Caller")

#callee_addr = Addr("CALLEE", 5060)
callee_uri = Uri(local_addr, "callee")
callee_nameaddr = Nameaddr(callee_uri, "Callee")


class DummyCallee(Dialog):
    def handle_request(self, msg):
        method = msg["method"]
        print("DummyCallee received: %s" % method)
        #pprint(msg)
        
        if method == "INVITE":
            self.msg = msg
            self.take_request(msg)
            self.trying()
        elif method == "ACK":
            self.send_message(dict(is_response=True, method="ACK"), msg)
            self.send_message(dict(is_response=True, method="ACK"), self.msg)
        
        
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))
        
        
    def send_message(self, msg, related_msg=None, report=None):
        print("DummyCallee sending:")
        #pprint(response)
        super(DummyCallee, self).send_message(msg, related_msg, report)
        

    def trying(self):
        response = self.make_response(dict(status=Status(100, "Trying")), self.msg)
        self.send_message(response, self.msg)
        self.sleep(1, self.ringing)
        
        
    def ringing(self):
        response = self.make_response(dict(status=Status(180, "Ringing")), self.msg)
        self.send_message(response, self.msg)
        self.sleep(1, self.answering)


    def answering(self):
        response = self.make_response(dict(status=Status(200, "OK")), self.msg)
        self.send_message(response, self.msg)


class TestDialogManager(DialogManager):
    def testing(self):
        print("Testing begins.")
        wself = weakref.proxy(self)
        self.caller = DummyCallee(wself, caller_uri, caller_nameaddr.name, callee_uri)
        self.add_dialog(self.caller)
        # TODO: Hah! We don't have a to tag here yet!
        
        req_params = dict(method="INVITE")
        report = WeakMethod(self.invite_responded)
        self.caller.send_message(self.caller.make_request(req_params), report=report)
        #req_text = print_structured_message(caller.make_request(req_params))
        #transport.recved(req_text)
        
        
    def invite_responded(self, response):
        code = response["status"].code
        print("Invite responded with %d" % code)
        
        if code >= 200:
            req_params = dict(method="ACK")
            report = WeakMethod(self.invite_responded)  # FIXME: report not needed!
            self.caller.send_message(self.caller.make_request(req_params), response, report=report)
        

    def auth_invite(self, uri):
        print("Authing callee: %s" % str(uri))
        wself = weakref.proxy(self)
        callee = DummyCallee(wself, callee_uri, callee_nameaddr.name)
        return callee
        

class Transport(object):
    def __init__(self, reception):
        self.reception = reception
        
    def get_addr(self):
        return local_addr

    def send(self, msg):
        sip = print_structured_message(msg)
        print("Transport sending:")
        print(sip)
        
        metapoll.register_timeout(timedelta(), WeakMethod(self.recved, sip))
        #self.recved(sip)

    def recved(self, sip):
        print("Transport receiving:")
        #print(s)
        self.reception(parse_structured_message(sip))


def reception(params):
    print("Got message from transport.")
    #print("Req params: %s" % req_params)
    matched = transaction_manager.match_incoming_message(params)
    
    if not matched:
        report = dialog_manager.handle_incoming_message(params)
        
        if report:
            transaction_manager.create_incoming_request(params, report)
        else:
            raise Exception("Couldn't create dialog!")


def transmission(msg):
    print("Sending message by transport.")
    transport.send(msg)


def transmission2(msg, related_msg, report):
    print("Sending message by transaction.")
    transaction_manager.send_message(msg, related_msg, report)


logging.basicConfig(level=logging.DEBUG)
metapoll = Metapoll()
transport = Transport(reception)
transaction_manager = TransactionManager(transmission, local_addr)
dialog_manager = TestDialogManager(transmission2)

metapoll.register_timeout(timedelta(seconds=0.2), WeakMethod(transaction_manager.maintenance), repeat=True)
metapoll.register_timeout(timedelta(seconds=1), WeakMethod(dialog_manager.testing))

while True:
    #print("Polling.")
    metapoll.do_poll()
