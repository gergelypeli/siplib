#! /usr/bin/python

from __future__ import print_function, unicode_literals
from pprint import pprint
import weakref
from datetime import timedelta
import logging

from async import Metapoll, WeakMethod

from format import Addr, Uri, Nameaddr, Status, Via, print_structured_message, parse_structured_message
from transactions import TransactionManager, make_virtual_response
from dialog import Dialog, DialogManager
from leg import Leg

local_addr = Addr("localhost", 5060)

#caller_addr = Addr("CALLER", 5060)
caller_uri = Uri(local_addr, "caller")
caller_nameaddr = Nameaddr(caller_uri, "Caller")

#callee_addr = Addr("CALLEE", 5060)
callee_uri = Uri(local_addr, "callee")
callee_nameaddr = Nameaddr(callee_uri, "Callee")


class Callee(object):
    def __init__(self, local_uri, local_name):
        self.leg = Leg(WeakMethod(self.recved), weakref.proxy(dialog_manager), local_uri, local_name, None)
        
        
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def recved(self, action):
        if action["type"] == "dial":
            self.sleep(1, self.ringing)
        elif action["type"] == "hangup":
            print("The caller hung up.")

        
    def ringing(self):
        self.leg.do(dict(type="ring"))
        self.sleep(1, self.answering)


    def answering(self):
        self.leg.do(dict(type="answer"))
        self.sleep(1, self.hanging)
        
        
    def hanging(self):
        self.leg.do(dict(type="hangup"))


class Caller(object):
    def __init__(self, local_uri, local_name, remote_uri):
        self.leg = Leg(WeakMethod(self.recved), weakref.proxy(dialog_manager), local_uri, local_name, remote_uri)


    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def dial(self):
        self.leg.do(dict(type="dial"))
        #self.sleep(3, self.hanging)


    def recved(self, action):
        if action["type"] == "answer":
            print("Answered.")
            #self.sleep(1, self.hanging)

            
    def hanging(self):
        self.leg.do(dict(type="hangup"))


class TestDialogManager(DialogManager):
    def auth_invite(self, uri):
        global callee
        print("Authing callee: %s" % str(uri))
        callee = Callee(callee_uri, callee_nameaddr.name)
        return callee.leg.dialog  # Adds it to manager
        

class Transport(object):
    def __init__(self, reception):
        self.reception = reception
        
    def get_addr(self):
        return local_addr

    def send(self, msg):
        sip = print_structured_message(msg)
        print("Transport sending:")
        print(sip)
        
        metapoll.register_timeout(timedelta(), WeakMethod(self.recved, sip))
        #self.recved(sip)

    def recved(self, sip):
        print("Transport receiving:")
        #print(s)
        self.reception(parse_structured_message(sip))


def reception(params):
    print("Got message from transport.")
    #print("Req params: %s" % req_params)
    matched = transaction_manager.match_incoming_message(params)
    
    if not matched:
        report = dialog_manager.handle_incoming_message(params)
        
        if report:
            transaction_manager.create_incoming_request(params, report)
        else:
            raise Exception("Couldn't create dialog!")


def to_transport(msg):
    print("Sending message by transport.")
    transport.send(msg)


def to_transaction(msg, related_msg, report):
    print("Sending message by transaction.")
    transaction_manager.send_message(msg, related_msg, report)


def testing():
    global caller
    print("Testing begins.")
    
    caller = Caller(caller_uri, caller_nameaddr.name, callee_uri)
    dialog_manager.add_dialog(caller.leg.dialog)  # Must do
    caller.dial()


logging.basicConfig(level=logging.DEBUG)
metapoll = Metapoll()
transport = Transport(reception)
transaction_manager = TransactionManager(to_transport, local_addr)
dialog_manager = TestDialogManager(to_transaction)

metapoll.register_timeout(timedelta(seconds=0.2), WeakMethod(transaction_manager.maintenance), repeat=True)
metapoll.register_timeout(timedelta(seconds=1), testing)

while True:
    #print("Polling.")
    metapoll.do_poll()
