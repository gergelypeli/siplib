#! /usr/bin/python

from __future__ import print_function, unicode_literals
from pprint import pprint
import weakref
from datetime import timedelta
import logging

from async import Metapoll, WeakMethod
from coroutine import coroutine

from format import Addr, Uri, Nameaddr, Status, Via, print_structured_message, parse_structured_message
from transactions import TransactionManager
from dialog import Dialog, DialogManager

caller_addr = Addr("CALLER", 5060)
caller_uri = Uri(caller_addr, "caller")
caller_nameaddr = Nameaddr(caller_uri, "Caller")

callee_addr = Addr("CALLEE", 5060)
callee_uri = Uri(callee_addr, "callee")
callee_nameaddr = Nameaddr(callee_uri, "Callee")


class DummyCallee(Dialog):
    def handle_request(self, msg):
        print("DummyCallee received:")
        #pprint(msg)
        self.msg = msg
        self.take_request(msg)
        self.trying()
        
        
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))
        
        
    def send_message(self, msg):
        print("DummyCallee sending:")
        #pprint(response)
        super(DummyCallee, self).send_message(msg)
        

    def trying(self):
        response = self.make_response(dict(status=Status(100, "Trying")), self.msg)
        self.send_message(response)
        self.sleep(1, self.ringing)
        
        
    def ringing(self):
        response = self.make_response(dict(status=Status(180, "Ringing")), self.msg)
        self.send_message(response)
        self.sleep(1, self.answering)


    def answering(self):
        response = self.make_response(dict(status=Status(200, "OK")), self.msg)
        self.send_message(response)


class TestDialogManager(DialogManager):
    def auth_invite(self, uri):
        print("Authing callee: %s" % str(uri))
        wself = weakref.proxy(self)
        callee = DummyCallee(wself, callee_uri, callee_nameaddr.name)
        return callee
        

class Transport(object):
    def __init__(self, reception):
        self.reception = reception
        
    def get_addr(self):
        return callee_addr

    def send(self, msg):
        print("Transport sending:")
        print(print_structured_message(msg))

    def recved(self, s):
        print("Transport receiving:")
        #print(s)
        self.reception(parse_structured_message(s))


def reception(params):
    print("Got message from transport.")
    #print("Req params: %s" % req_params)
    matched = transaction_manager.match_incoming_message(params)
    
    if not matched:
        report = dialog_manager.handle_incoming_message(params)
        
        if report:
            transaction_manager.create_incoming_request(params, report)
        else:
            raise Exception("Couldn't create dialog!")


def transmission(msg):
    print("Sending message by transport.")
    transport.send(msg)


def transmission2(msg):
    print("Sending message by transaction.")
    transaction_manager.send_message(msg)


def testing():
    print("Testing begins.")
    caller = DummyCallee(None, caller_uri, caller_nameaddr.name, callee_uri)
    req_params = dict(method="INVITE", via=[Via(caller_addr, "bbbb")])
    req_text = print_structured_message(caller.make_request(req_params))
    transport.recved(req_text)


logging.basicConfig(level=logging.DEBUG)
metapoll = Metapoll()
transport = Transport(reception)
transaction_manager = TransactionManager(transmission, callee_addr)
dialog_manager = TestDialogManager(transmission2)

metapoll.register_timeout(timedelta(seconds=0.2), WeakMethod(transaction_manager.maintenance), repeat=True)
metapoll.register_timeout(timedelta(seconds=1), testing)

while True:
    #print("Polling.")
    metapoll.do_poll()
