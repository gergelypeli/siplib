#! /usr/bin/python

from __future__ import print_function, unicode_literals
from pprint import pprint
import weakref
from datetime import timedelta, datetime
import logging

from async import Metapoll, WeakMethod

from format import Addr, Uri, Nameaddr, Status, Via, print_structured_message, parse_structured_message
from transactions import TransactionManager, make_virtual_response, make_simple_response
from dialog import Dialog, DialogManager
from leg import Leg, create_uninvited_leg
from sdp import Sdp, Origin, Connection, Timing, Channel, RtpFormat

local_addr = Addr("localhost", 5060)

caller_uri = Uri(local_addr, "caller")
caller_nameaddr = Nameaddr(caller_uri, "Caller")

callee_uri = Uri(local_addr, "callee")
callee_nameaddr = Nameaddr(callee_uri, "Callee")

wrong_uri = Uri(local_addr, "wrong")

caller_sdp = Sdp.parse("""
v=0
o=jdoe 2890844526 2890842807 IN IP4 10.47.16.5
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.example.com/seminars/sdp.pdf
e=j.doe@example.com (Jane Doe)
c=IN IP4 224.2.17.12
t=2873397496 2873404696
a=recvonly
m=audio 49170 RTP/AVP 0
m=video 51372 RTP/AVP 99
a=rtpmap:99 h263-1998/90000
""")


class Callee(object):
    def __init__(self, local_uri, local_name):
        self.leg = Leg(WeakMethod(self.recved), weakref.proxy(dialog_manager), local_uri, local_name, None)
        
        
    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def recved(self, action):
        if action["type"] == "dial":
            self.offer = action.get("sdp")
            print("Got offer:\n%s" % repr(self.offer))
            self.sleep(1, self.ringing)
        elif action["type"] == "hangup":
            print("The caller hung up.")

        
    def ringing(self):
        self.leg.do(dict(type="ring"))
        self.sleep(1, self.answering)


    def answering(self):
        answer = self.make_answer(self.offer)
        self.leg.do(dict(type="answer", sdp=answer))  # TODO: rename to accept?
        self.sleep(1, self.hanging)
        
        
    def hanging(self):
        self.leg.do(dict(type="hangup"))


    def make_answer(self, offer):
        return offer


class Caller(object):
    def __init__(self, local_uri, local_name, remote_uri):
        self.leg = Leg(WeakMethod(self.recved), weakref.proxy(dialog_manager), local_uri, local_name, remote_uri)


    def sleep(self, secs, method):
        metapoll.register_timeout(timedelta(seconds=secs), WeakMethod(method))


    def dial(self):
        self.leg.do(dict(type="dial", sdp=caller_sdp))
        #self.sleep(3, self.hanging)


    def recved(self, action):
        if action["type"] == "answer":
            print("Answered with SDP:\n%s" % repr(action.get("sdp")))
            #self.sleep(1, self.hanging)

            
    def hanging(self):
        self.leg.do(dict(type="hangup"))


class Transport(object):
    def __init__(self, reception):
        self.reception = reception
        
    def get_addr(self):
        return local_addr

    def send(self, msg):
        sip = print_structured_message(msg)
        #print("Transport sending:")
        print("\n" + "\n".join("  %s" % line for line in sip.split("\n")))
        
        metapoll.register_timeout(timedelta(), WeakMethod(self.recved, sip))
        #self.recved(sip)

    def recved(self, sip):
        #print("Transport receiving:")
        #print(s)
        self.reception(parse_structured_message(sip))


def welcome(msg):
    global callee
    
    if msg["method"] == "INVITE" and "tag" not in msg["to"].params and msg["to"].uri.user == "callee":
        callee = Callee(callee_uri, callee_nameaddr.name)
        return WeakMethod(callee.leg.dialog.recv_request)

    def reject(msg):
        if msg:
            response = make_simple_response(msg, Status(400, "WTF"), "ROTFLMAO")
            transaction_manager.send_message(response, msg)
    
    return reject


def reception(params):
    #print("Got message from transport.")
    #print("Req params: %s" % req_params)
    invite_params = transaction_manager.match_uninvited_response(params)
    if invite_params:
        create_uninvited_leg(invite_params)
    
    matched = transaction_manager.match_incoming_message(params)
    
    if not matched:
        report = dialog_manager.handle_incoming_request(params)
        
        if not report:
            report = welcome(params)
        
        if not report:
            print("Ignoring evil message!")
            return
            
        transaction_manager.create_incoming_request(params, report)


def to_transport(msg):
    #print("Sending message by transport.")
    transport.send(msg)


def to_transaction(msg, related_msg, report):
    print("Sending message by transaction.")
    transaction_manager.send_message(msg, related_msg, report)


def testing():
    global caller
    print("Testing begins.")

    caller = Caller(caller_uri, caller_nameaddr.name, callee_uri)
    caller.dial()


logging.basicConfig(level=logging.DEBUG)
metapoll = Metapoll()
transport = Transport(reception)
transaction_manager = TransactionManager(local_addr, to_transport)
dialog_manager = DialogManager(local_addr, to_transaction)

metapoll.register_timeout(timedelta(seconds=0.2), WeakMethod(transaction_manager.maintenance), repeat=True)
metapoll.register_timeout(timedelta(seconds=1), testing)

while True:
    try:
        metapoll.do_poll()
    except KeyboardInterrupt:
        break
