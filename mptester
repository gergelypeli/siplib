#! /usr/bin/python

import mp
from async import Metapoll, WeakMethod
import datetime
from coroutine import coroutine

CTX = "elso"
FORMATS = { 8: "pcma" }
HOST="127.0.0.1"

metapoll = Metapoll()

def loop_a_bit():
    finish = []
    def timeout():
        finish.append(True)
        
    metapoll.register_timeout(datetime.timedelta(seconds=1), timeout)
    while not finish:
        metapoll.do_poll()


@coroutine
def receiving_generator(self, pattern):
    print("Receiving started!")
    
    while True:
        type, payload = yield
        if not payload.startswith(pattern):
            raise Exception("Bad packet!")

        print("Received RTP %d: %r" % (type, payload))


src_rcv = receiving_generator("yyy")
dst_rcv = receiving_generator("xxx")

ctl = mp.Controller(metapoll, (HOST, 10000))

src = mp.Rtp(metapoll, (HOST, 20001), (HOST, 10001), WeakMethod(src_rcv.send))
dst = mp.Rtp(metapoll, (HOST, 20002), (HOST, 10002), WeakMethod(dst_rcv.send))

def context_callback(mid, params):
    print("Got context event: %r" % params)

ctl.create_context(CTX, context_callback=context_callback)
ctl.modify_context(CTX, 0, type="net", local_host=HOST, local_port=10001, recv_formats=FORMATS, send_formats=FORMATS)
ctl.modify_context(CTX, 1, type="net", local_host=HOST, local_port=10002, recv_formats=FORMATS, send_formats=FORMATS)

src.send(8, "xxx1")
loop_a_bit()

dst.send(8, "yyy1")
loop_a_bit()

src.send(8, "xxx2")
loop_a_bit()

ctl.modify_context(CTX, 1)
ctl.modify_context(CTX, 0)
ctl.delete_context(CTX)
